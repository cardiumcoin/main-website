{"id":"js/HoloEffect.js","dependencies":[{"name":"C:\\Users\\note\\Desktop\\cardium\\main\\public\\package.json","includedInParent":true,"mtime":1729412978659},{"name":"three","loc":{"line":1,"column":24,"index":24},"parent":"C:\\Users\\note\\Desktop\\cardium\\main\\public\\js\\HoloEffect.js","resolved":"C:\\Users\\note\\Desktop\\cardium\\main\\public\\node_modules\\three\\build\\three.module.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HolloEffect = void 0;\nvar _three = require(\"three\");\n/**\r\n * HolloEffect shader\r\n * Custom shader for creating a holographic effect with noise and distortion.\r\n */\n\nvar HolloEffect = exports.HolloEffect = {\n  name: 'HolloEffect',\n  uniforms: {\n    'tDiffuse': {\n      value: null\n    },\n    'progress': {\n      value: 0\n    },\n    'uSize': {\n      value: new _three.Vector2(window.innerWidth, window.innerHeight)\n    },\n    'center': {\n      value: new _three.Vector2(0.5, 0.5)\n    },\n    'angle': {\n      value: 1.57\n    },\n    'scale': {\n      value: 1.0\n    },\n    'uTime': {\n      value: 0.0\n    }\n  },\n  vertexShader: /* glsl */\"\\n\\n        varying vec2 vUv;\\n\\n        void main() {\\n\\n            vUv = uv;\\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n        }\\n    \",\n  fragmentShader: /* glsl */\"\\n\\n        uniform vec2 center;\\n        uniform vec2 uSize;\\n        uniform float progress;\\n        uniform float uTime;\\n        uniform float angle;\\n        uniform float scale;\\n        uniform sampler2D tDiffuse;\\n\\n        varying vec2 vUv;\\n\\n        //\\tSimplex 3D Noise \\n        //\\tby Ian McEwan, Ashima Arts\\n        vec4 permute(vec4 x){ return mod(((x*34.0)+1.0)*x, 289.0); }\\n        vec4 taylorInvSqrt(vec4 r){ return 1.79284291400159 - 0.85373472095314 * r; }\\n\\n        float snoise(vec3 v) { \\n            const vec2 C = vec2(1.0/6.0, 1.0/3.0);\\n            const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n            vec3 i  = floor(v + dot(v, C.yyy));\\n            vec3 x0 = v - i + dot(i, C.xxx);\\n\\n            vec3 g = step(x0.yzx, x0.xyz);\\n            vec3 l = 1.0 - g;\\n            vec3 i1 = min(g.xyz, l.zxy);\\n            vec3 i2 = max(g.xyz, l.zxy);\\n\\n            vec3 x1 = x0 - i1 + C.xxx;\\n            vec3 x2 = x0 - i2 + C.xxx * 2.0;\\n            vec3 x3 = x0 - 1.0 + C.xxx * 3.0;\\n\\n            i = mod(i, 289.0); \\n            vec4 p = permute(permute(permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) \\n                        + i.y + vec4(0.0, i1.y, i2.y, 1.0)) \\n                        + i.x + vec4(0.0, i1.x, i2.x, 1.0));\\n\\n            float n_ = 1.0/7.0; \\n            vec3 ns = n_ * D.wyz - D.xzx;\\n\\n            vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\\n\\n            vec4 x_ = floor(j * ns.z);\\n            vec4 y_ = floor(j - 7.0 * x_);\\n\\n            vec4 x = x_ * ns.x + ns.yyyy;\\n            vec4 y = y_ * ns.x + ns.yyyy;\\n            vec4 h = 1.0 - abs(x) - abs(y);\\n\\n            vec4 b0 = vec4(x.xy, y.xy);\\n            vec4 b1 = vec4(x.zw, y.zw);\\n\\n            vec4 s0 = floor(b0) * 2.0 + 1.0;\\n            vec4 s1 = floor(b1) * 2.0 + 1.0;\\n            vec4 sh = -step(h, vec4(0.0));\\n\\n            vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\\n            vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\\n\\n            vec3 p0 = vec3(a0.xy, h.x);\\n            vec3 p1 = vec3(a0.zw, h.y);\\n            vec3 p2 = vec3(a1.xy, h.z);\\n            vec3 p3 = vec3(a1.zw, h.w);\\n\\n            vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2,p2), dot(p3,p3)));\\n            p0 *= norm.x;\\n            p1 *= norm.y;\\n            p2 *= norm.z;\\n            p3 *= norm.w;\\n\\n            vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n            m = m * m;\\n            return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\\n        }\\n\\n        void main() {\\n            vec2 uv = vUv;\\n            vec4 color = texture2D(tDiffuse, vUv);\\n\\n            float lineOffset = snoise(vec3(0.0, 10.0, uTime));\\n            float holoIntensity = 0.5 + 0.1 * snoise(vec3(0.0, 30.0, uTime));\\n            float direction = -1.0 ;\\n\\n            uv.x += direction * (8.0 + 4.0 * lineOffset) / uSize.x;\\n            vec3 hologram = texture2D(tDiffuse, uv).rgb;\\n\\n            vec3 background = vec3(0.0 / 255.0, 4.0 / 255.0, 16.0 / 255.0) * 0.3;\\n            vec3 combinedColor = color.rgb + hologram * holoIntensity;\\n\\n            vec3 luminance = vec3(0.299, 0.587, 0.114);\\n            float lumFront = dot(luminance, combinedColor);\\n            float lumBack = dot(luminance, background);\\n\\n            float d = lumFront - lumBack;\\n            vec3 finalColor = background + d;\\n            vec3 theFinalFinalColor = mix(color.rgb, finalColor, progress);\\n\\n            // Assign final color\\n            gl_FragColor = vec4(theFinalFinalColor, 1.0);\\n        }\\n    \"\n};"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"js/HoloEffect.js","original":{"line":1,"column":0}},{"generated":{"line":7,"column":4},"source":"js/HoloEffect.js","original":{"line":1,"column":0},"name":"_three"},{"generated":{"line":7,"column":10},"source":"js/HoloEffect.js","original":{"line":1,"column":0}},{"generated":{"line":7,"column":13},"source":"js/HoloEffect.js","original":{"line":1,"column":0},"name":"require"},{"generated":{"line":7,"column":20},"source":"js/HoloEffect.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"js/HoloEffect.js","original":{"line":3,"column":0}},{"generated":{"line":9,"column":0},"source":"js/HoloEffect.js","original":{"line":4,"column":0}},{"generated":{"line":10,"column":0},"source":"js/HoloEffect.js","original":{"line":5,"column":0}},{"generated":{"line":11,"column":0},"source":"js/HoloEffect.js","original":{"line":6,"column":0}},{"generated":{"line":13,"column":0},"source":"js/HoloEffect.js","original":{"line":8,"column":0}},{"generated":{"line":13,"column":4},"source":"js/HoloEffect.js","original":{"line":8,"column":6},"name":"HolloEffect"},{"generated":{"line":13,"column":15},"source":"js/HoloEffect.js","original":{"line":8,"column":17}},{"generated":{"line":13,"column":18},"source":"js/HoloEffect.js","original":{"line":8,"column":17},"name":"exports"},{"generated":{"line":13,"column":25},"source":"js/HoloEffect.js","original":{"line":8,"column":17}},{"generated":{"line":13,"column":26},"source":"js/HoloEffect.js","original":{"line":8,"column":17},"name":"HolloEffect"},{"generated":{"line":13,"column":37},"source":"js/HoloEffect.js","original":{"line":8,"column":17}},{"generated":{"line":13,"column":40},"source":"js/HoloEffect.js","original":{"line":8,"column":20}},{"generated":{"line":14,"column":2},"source":"js/HoloEffect.js","original":{"line":10,"column":4},"name":"name"},{"generated":{"line":14,"column":6},"source":"js/HoloEffect.js","original":{"line":10,"column":8}},{"generated":{"line":14,"column":8},"source":"js/HoloEffect.js","original":{"line":10,"column":10}},{"generated":{"line":14,"column":21},"source":"js/HoloEffect.js","original":{"line":10,"column":23}},{"generated":{"line":15,"column":2},"source":"js/HoloEffect.js","original":{"line":12,"column":4},"name":"uniforms"},{"generated":{"line":15,"column":10},"source":"js/HoloEffect.js","original":{"line":12,"column":12}},{"generated":{"line":15,"column":12},"source":"js/HoloEffect.js","original":{"line":12,"column":14}},{"generated":{"line":16,"column":4},"source":"js/HoloEffect.js","original":{"line":14,"column":8}},{"generated":{"line":16,"column":14},"source":"js/HoloEffect.js","original":{"line":14,"column":18}},{"generated":{"line":16,"column":16},"source":"js/HoloEffect.js","original":{"line":14,"column":20}},{"generated":{"line":17,"column":6},"source":"js/HoloEffect.js","original":{"line":14,"column":22},"name":"value"},{"generated":{"line":17,"column":11},"source":"js/HoloEffect.js","original":{"line":14,"column":27}},{"generated":{"line":17,"column":13},"source":"js/HoloEffect.js","original":{"line":14,"column":29}},{"generated":{"line":18,"column":4},"source":"js/HoloEffect.js","original":{"line":14,"column":34}},{"generated":{"line":18,"column":5},"source":"js/HoloEffect.js","original":{"line":14,"column":35}},{"generated":{"line":19,"column":4},"source":"js/HoloEffect.js","original":{"line":15,"column":8}},{"generated":{"line":19,"column":14},"source":"js/HoloEffect.js","original":{"line":15,"column":18}},{"generated":{"line":19,"column":16},"source":"js/HoloEffect.js","original":{"line":15,"column":20}},{"generated":{"line":20,"column":6},"source":"js/HoloEffect.js","original":{"line":15,"column":22},"name":"value"},{"generated":{"line":20,"column":11},"source":"js/HoloEffect.js","original":{"line":15,"column":27}},{"generated":{"line":20,"column":13},"source":"js/HoloEffect.js","original":{"line":15,"column":29}},{"generated":{"line":21,"column":4},"source":"js/HoloEffect.js","original":{"line":15,"column":31}},{"generated":{"line":21,"column":5},"source":"js/HoloEffect.js","original":{"line":15,"column":32}},{"generated":{"line":22,"column":4},"source":"js/HoloEffect.js","original":{"line":16,"column":8}},{"generated":{"line":22,"column":11},"source":"js/HoloEffect.js","original":{"line":16,"column":15}},{"generated":{"line":22,"column":13},"source":"js/HoloEffect.js","original":{"line":16,"column":17}},{"generated":{"line":23,"column":6},"source":"js/HoloEffect.js","original":{"line":16,"column":19},"name":"value"},{"generated":{"line":23,"column":11},"source":"js/HoloEffect.js","original":{"line":16,"column":24}},{"generated":{"line":23,"column":13},"source":"js/HoloEffect.js","original":{"line":16,"column":26}},{"generated":{"line":23,"column":17},"source":"js/HoloEffect.js","original":{"line":16,"column":30},"name":"Vector2"},{"generated":{"line":23,"column":31},"source":"js/HoloEffect.js","original":{"line":16,"column":37}},{"generated":{"line":23,"column":32},"source":"js/HoloEffect.js","original":{"line":16,"column":38},"name":"window"},{"generated":{"line":23,"column":38},"source":"js/HoloEffect.js","original":{"line":16,"column":44}},{"generated":{"line":23,"column":39},"source":"js/HoloEffect.js","original":{"line":16,"column":45},"name":"innerWidth"},{"generated":{"line":23,"column":49},"source":"js/HoloEffect.js","original":{"line":16,"column":55}},{"generated":{"line":23,"column":51},"source":"js/HoloEffect.js","original":{"line":16,"column":57},"name":"window"},{"generated":{"line":23,"column":57},"source":"js/HoloEffect.js","original":{"line":16,"column":63}},{"generated":{"line":23,"column":58},"source":"js/HoloEffect.js","original":{"line":16,"column":64},"name":"innerHeight"},{"generated":{"line":23,"column":69},"source":"js/HoloEffect.js","original":{"line":16,"column":75}},{"generated":{"line":24,"column":4},"source":"js/HoloEffect.js","original":{"line":16,"column":77}},{"generated":{"line":24,"column":5},"source":"js/HoloEffect.js","original":{"line":16,"column":78}},{"generated":{"line":25,"column":4},"source":"js/HoloEffect.js","original":{"line":17,"column":8}},{"generated":{"line":25,"column":12},"source":"js/HoloEffect.js","original":{"line":17,"column":16}},{"generated":{"line":25,"column":14},"source":"js/HoloEffect.js","original":{"line":17,"column":18}},{"generated":{"line":26,"column":6},"source":"js/HoloEffect.js","original":{"line":17,"column":20},"name":"value"},{"generated":{"line":26,"column":11},"source":"js/HoloEffect.js","original":{"line":17,"column":25}},{"generated":{"line":26,"column":13},"source":"js/HoloEffect.js","original":{"line":17,"column":27}},{"generated":{"line":26,"column":17},"source":"js/HoloEffect.js","original":{"line":17,"column":31},"name":"Vector2"},{"generated":{"line":26,"column":31},"source":"js/HoloEffect.js","original":{"line":17,"column":38}},{"generated":{"line":26,"column":32},"source":"js/HoloEffect.js","original":{"line":17,"column":39}},{"generated":{"line":26,"column":35},"source":"js/HoloEffect.js","original":{"line":17,"column":42}},{"generated":{"line":26,"column":37},"source":"js/HoloEffect.js","original":{"line":17,"column":44}},{"generated":{"line":26,"column":40},"source":"js/HoloEffect.js","original":{"line":17,"column":47}},{"generated":{"line":27,"column":4},"source":"js/HoloEffect.js","original":{"line":17,"column":49}},{"generated":{"line":27,"column":5},"source":"js/HoloEffect.js","original":{"line":17,"column":50}},{"generated":{"line":28,"column":4},"source":"js/HoloEffect.js","original":{"line":18,"column":8}},{"generated":{"line":28,"column":11},"source":"js/HoloEffect.js","original":{"line":18,"column":15}},{"generated":{"line":28,"column":13},"source":"js/HoloEffect.js","original":{"line":18,"column":17}},{"generated":{"line":29,"column":6},"source":"js/HoloEffect.js","original":{"line":18,"column":19},"name":"value"},{"generated":{"line":29,"column":11},"source":"js/HoloEffect.js","original":{"line":18,"column":24}},{"generated":{"line":29,"column":13},"source":"js/HoloEffect.js","original":{"line":18,"column":26}},{"generated":{"line":30,"column":4},"source":"js/HoloEffect.js","original":{"line":18,"column":31}},{"generated":{"line":30,"column":5},"source":"js/HoloEffect.js","original":{"line":18,"column":32}},{"generated":{"line":31,"column":4},"source":"js/HoloEffect.js","original":{"line":19,"column":8}},{"generated":{"line":31,"column":11},"source":"js/HoloEffect.js","original":{"line":19,"column":15}},{"generated":{"line":31,"column":13},"source":"js/HoloEffect.js","original":{"line":19,"column":17}},{"generated":{"line":32,"column":6},"source":"js/HoloEffect.js","original":{"line":19,"column":19},"name":"value"},{"generated":{"line":32,"column":11},"source":"js/HoloEffect.js","original":{"line":19,"column":24}},{"generated":{"line":32,"column":13},"source":"js/HoloEffect.js","original":{"line":19,"column":26}},{"generated":{"line":33,"column":4},"source":"js/HoloEffect.js","original":{"line":19,"column":30}},{"generated":{"line":33,"column":5},"source":"js/HoloEffect.js","original":{"line":19,"column":31}},{"generated":{"line":34,"column":4},"source":"js/HoloEffect.js","original":{"line":20,"column":8}},{"generated":{"line":34,"column":11},"source":"js/HoloEffect.js","original":{"line":20,"column":15}},{"generated":{"line":34,"column":13},"source":"js/HoloEffect.js","original":{"line":20,"column":17}},{"generated":{"line":35,"column":6},"source":"js/HoloEffect.js","original":{"line":20,"column":19},"name":"value"},{"generated":{"line":35,"column":11},"source":"js/HoloEffect.js","original":{"line":20,"column":24}},{"generated":{"line":35,"column":13},"source":"js/HoloEffect.js","original":{"line":20,"column":26}},{"generated":{"line":36,"column":4},"source":"js/HoloEffect.js","original":{"line":20,"column":30}},{"generated":{"line":37,"column":2},"source":"js/HoloEffect.js","original":{"line":22,"column":4}},{"generated":{"line":37,"column":3},"source":"js/HoloEffect.js","original":{"line":22,"column":5}},{"generated":{"line":38,"column":2},"source":"js/HoloEffect.js","original":{"line":24,"column":4},"name":"vertexShader"},{"generated":{"line":38,"column":14},"source":"js/HoloEffect.js","original":{"line":24,"column":16}},{"generated":{"line":38,"column":16},"source":"js/HoloEffect.js","original":{"line":24,"column":18}},{"generated":{"line":38,"column":213},"source":"js/HoloEffect.js","original":{"line":34,"column":5}},{"generated":{"line":39,"column":2},"source":"js/HoloEffect.js","original":{"line":36,"column":4},"name":"fragmentShader"},{"generated":{"line":39,"column":16},"source":"js/HoloEffect.js","original":{"line":36,"column":18}},{"generated":{"line":39,"column":18},"source":"js/HoloEffect.js","original":{"line":36,"column":20}},{"generated":{"line":40,"column":0},"source":"js/HoloEffect.js","original":{"line":139,"column":0}},{"generated":{"line":40,"column":1},"source":"js/HoloEffect.js","original":{"line":139,"column":1}}],"sources":{"js/HoloEffect.js":"import { Vector2 } from 'three';\r\n\r\n/**\r\n * HolloEffect shader\r\n * Custom shader for creating a holographic effect with noise and distortion.\r\n */\r\n\r\nconst HolloEffect = {\r\n\r\n    name: 'HolloEffect',\r\n\r\n    uniforms: {\r\n\r\n        'tDiffuse': { value: null },\r\n        'progress': { value: 0 },\r\n        'uSize': { value: new Vector2(window.innerWidth, window.innerHeight) },\r\n        'center': { value: new Vector2(0.5, 0.5) },\r\n        'angle': { value: 1.57 },\r\n        'scale': { value: 1.0 },\r\n        'uTime': { value: 0.0 }\r\n\r\n    },\r\n\r\n    vertexShader: /* glsl */`\r\n\r\n        varying vec2 vUv;\r\n\r\n        void main() {\r\n\r\n            vUv = uv;\r\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n        }\r\n    `,\r\n\r\n    fragmentShader: /* glsl */`\r\n\r\n        uniform vec2 center;\r\n        uniform vec2 uSize;\r\n        uniform float progress;\r\n        uniform float uTime;\r\n        uniform float angle;\r\n        uniform float scale;\r\n        uniform sampler2D tDiffuse;\r\n\r\n        varying vec2 vUv;\r\n\r\n        //\tSimplex 3D Noise \r\n        //\tby Ian McEwan, Ashima Arts\r\n        vec4 permute(vec4 x){ return mod(((x*34.0)+1.0)*x, 289.0); }\r\n        vec4 taylorInvSqrt(vec4 r){ return 1.79284291400159 - 0.85373472095314 * r; }\r\n\r\n        float snoise(vec3 v) { \r\n            const vec2 C = vec2(1.0/6.0, 1.0/3.0);\r\n            const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\r\n\r\n            vec3 i  = floor(v + dot(v, C.yyy));\r\n            vec3 x0 = v - i + dot(i, C.xxx);\r\n\r\n            vec3 g = step(x0.yzx, x0.xyz);\r\n            vec3 l = 1.0 - g;\r\n            vec3 i1 = min(g.xyz, l.zxy);\r\n            vec3 i2 = max(g.xyz, l.zxy);\r\n\r\n            vec3 x1 = x0 - i1 + C.xxx;\r\n            vec3 x2 = x0 - i2 + C.xxx * 2.0;\r\n            vec3 x3 = x0 - 1.0 + C.xxx * 3.0;\r\n\r\n            i = mod(i, 289.0); \r\n            vec4 p = permute(permute(permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) \r\n                        + i.y + vec4(0.0, i1.y, i2.y, 1.0)) \r\n                        + i.x + vec4(0.0, i1.x, i2.x, 1.0));\r\n\r\n            float n_ = 1.0/7.0; \r\n            vec3 ns = n_ * D.wyz - D.xzx;\r\n\r\n            vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\r\n\r\n            vec4 x_ = floor(j * ns.z);\r\n            vec4 y_ = floor(j - 7.0 * x_);\r\n\r\n            vec4 x = x_ * ns.x + ns.yyyy;\r\n            vec4 y = y_ * ns.x + ns.yyyy;\r\n            vec4 h = 1.0 - abs(x) - abs(y);\r\n\r\n            vec4 b0 = vec4(x.xy, y.xy);\r\n            vec4 b1 = vec4(x.zw, y.zw);\r\n\r\n            vec4 s0 = floor(b0) * 2.0 + 1.0;\r\n            vec4 s1 = floor(b1) * 2.0 + 1.0;\r\n            vec4 sh = -step(h, vec4(0.0));\r\n\r\n            vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\r\n            vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\r\n\r\n            vec3 p0 = vec3(a0.xy, h.x);\r\n            vec3 p1 = vec3(a0.zw, h.y);\r\n            vec3 p2 = vec3(a1.xy, h.z);\r\n            vec3 p3 = vec3(a1.zw, h.w);\r\n\r\n            vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2,p2), dot(p3,p3)));\r\n            p0 *= norm.x;\r\n            p1 *= norm.y;\r\n            p2 *= norm.z;\r\n            p3 *= norm.w;\r\n\r\n            vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\r\n            m = m * m;\r\n            return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\r\n        }\r\n\r\n        void main() {\r\n            vec2 uv = vUv;\r\n            vec4 color = texture2D(tDiffuse, vUv);\r\n\r\n            float lineOffset = snoise(vec3(0.0, 10.0, uTime));\r\n            float holoIntensity = 0.5 + 0.1 * snoise(vec3(0.0, 30.0, uTime));\r\n            float direction = -1.0 ;\r\n\r\n            uv.x += direction * (8.0 + 4.0 * lineOffset) / uSize.x;\r\n            vec3 hologram = texture2D(tDiffuse, uv).rgb;\r\n\r\n            vec3 background = vec3(0.0 / 255.0, 4.0 / 255.0, 16.0 / 255.0) * 0.3;\r\n            vec3 combinedColor = color.rgb + hologram * holoIntensity;\r\n\r\n            vec3 luminance = vec3(0.299, 0.587, 0.114);\r\n            float lumFront = dot(luminance, combinedColor);\r\n            float lumBack = dot(luminance, background);\r\n\r\n            float d = lumFront - lumBack;\r\n            vec3 finalColor = background + d;\r\n            vec3 theFinalFinalColor = mix(color.rgb, finalColor, progress);\r\n\r\n            // Assign final color\r\n            gl_FragColor = vec4(theFinalFinalColor, 1.0);\r\n        }\r\n    `\r\n\r\n};\r\n\r\nexport { HolloEffect };\r\n"},"lineCount":null}},"error":null,"hash":"f41cb5ae77171a57630b87fb89e4e4ce","cacheData":{"env":{}}}